/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package neuronalNetworkGUI;
import neuronalNetwork.*;
import neuronalNetworkSerializable.NeuronalNetworkGUIProperties;
import neuronalNetworkSerializable.Serializable;

import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.Point;
import java.io.File;
import java.text.DecimalFormat;
import java.util.LinkedList;

import javax.swing.*;
import javax.swing.filechooser.FileFilter;

/**
 * @author Holger Vornholt, Tobias Eidmann, Michael Martin
 */

//TODO The Neuron layers could need a label to visiualize input, output and hidden layers.
public class NeuronalNetworkGUI extends javax.swing.JFrame {
	final String title = "Neuronale Netze";
	private static final long serialVersionUID = 1L;
	private DrawPanel drawPanel;
    private JPanel gridPanel;
    public boolean selectOrigin = false;
    public boolean editMode = false;
    public boolean networkInitiated = false;
    public NeuronButton fromButton;
    public NeuronButton toButton;
    
    private Network myNetwork;
    private Learning learning;
    private String[] possiblePropFunc;
    private String[] possibleActFunc;
    private String[] possibleLearnMethods;
    private GridLayout gridPanelLayout;
    public int currentZoom = 1;
    private String[] zoomOptions = {"0","1","2","3","4"};
    int[] fontSizes = {10,15,40,70,90};
    private int[] neuronHeight = {33,69,128,186,246};
    private int[] neuronWidth = {34,68,127,186,245};
    private int gridHspace = 20;
    private int gridVspace = 100;
    
    String path = "Images/Neuron" + this.currentZoom +".png";
    java.net.URL imgURL = getClass().getResource(path);
    
    /**
     * Creates new form NeuronalNetworkGUI
     */
    
	@SuppressWarnings({ "rawtypes", "unchecked" })
    public NeuronalNetworkGUI() {
        initComponents();
        this.setTitle(title);
        this.possiblePropFunc = new Neuron().getPossiblePropFunc();
        propagationComboBox.setModel(new javax.swing.DefaultComboBoxModel(possiblePropFunc)); 
        this.possibleActFunc = new Neuron().getPossibleActFunc();
        activationComboBox.setModel(new javax.swing.DefaultComboBoxModel(possibleActFunc));
        activationComboBox.setSelectedIndex(0);
        actParamTextField.setVisible(false);
        actParamLabel.setVisible(false);
        zoomComboBox.setModel(new javax.swing.DefaultComboBoxModel(zoomOptions));
        zoomComboBox.setSelectedIndex(1);
        this.possibleLearnMethods = Learning.getPossibleLearnMethods();
        ruleComboBox.setModel(new javax.swing.DefaultComboBoxModel(possibleLearnMethods));
        ruleComboBox.setSelectedIndex(0);
        //default values
        this.layersTextField.setText("3");
        this.whichLayerTextField.setText("1");
        this.learnRateTextField.setText("0.2");
        this.maxItTextField.setText("100000");
        
        
        gridPanel = new JPanel();
        drawPanel = new DrawPanel(this);
        drawPanel.setPreferredSize(new Dimension(500,500));
        drawPanel.setBackground(Color.white);
        //gridPanel.setBackground(Color.red);
        drawPanel.add(gridPanel);
        gridPanelLayout = new GridLayout(1,0,gridHspace,gridVspace);
        gridPanel.setLayout(gridPanelLayout);
        gridPanel.setOpaque(false);
       
        statisticsLabel1.setVisible(false);
        statisticsLabel2.setVisible(false);
        statisticsLabel3.setVisible(false);
        scenarioViewerPanel.setVisible(false);
        runButton.setEnabled(false);
        stepButton.setEnabled(false);
        randomizeButton.setEnabled(false);
        this.addEditEdgeButton.setEnabled(false);
        this.addButton.setEnabled(false);
        this.removeButton.setEnabled(false); 
        
        treeScrollPane.setViewportView(drawPanel);
    }
    
    public Point getGridPanelLocation(){
        return gridPanel.getLocation();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        buttonGroup2 = new javax.swing.ButtonGroup();
        jButton1 = new javax.swing.JButton();
        leftPanel = new javax.swing.JPanel();
        leftPanelTop = new javax.swing.JPanel();
        networkLabel = new javax.swing.JLabel();
        layersTextField = new javax.swing.JTextField();
        layersLabel = new javax.swing.JLabel();
        applyNetworkButton = new javax.swing.JButton();
        calcResultButton = new javax.swing.JButton();
        DescResult1Label = new javax.swing.JLabel();
        DescResult2Label = new javax.swing.JLabel();
        leftPanelBot = new javax.swing.JPanel();
        learningLabel = new javax.swing.JLabel();
        ruleComboBox = new javax.swing.JComboBox();
        ruleLabel = new javax.swing.JLabel();
        trainingButton = new javax.swing.JButton();
        ruleLabel1 = new javax.swing.JLabel();
        pathTextField = new javax.swing.JTextField();
        paraLabel = new javax.swing.JLabel();
        learnRateTextField = new javax.swing.JTextField();
        maxItTextField = new javax.swing.JTextField();
        learnRateLabel = new javax.swing.JLabel();
        maxItLabel = new javax.swing.JLabel();
        applyEditButton = new javax.swing.JButton();
        stepButton = new javax.swing.JButton();
        runButton = new javax.swing.JButton();
        statisticsLabel1 = new javax.swing.JLabel();
        statisticsLabel2 = new javax.swing.JLabel();
        statisticsLabel3 = new javax.swing.JLabel();
        scenarioViewerPanel = new javax.swing.JPanel();
        titleLabel = new javax.swing.JLabel();
        nextButton = new javax.swing.JButton();
        previousButton = new javax.swing.JButton();
        inputLabel = new javax.swing.JLabel();
        outputLabel = new javax.swing.JLabel();
        treeScrollPane = new javax.swing.JScrollPane();
        rightPanel = new javax.swing.JPanel();
        rightPanelTop = new javax.swing.JPanel();
        neuronsLabel = new javax.swing.JLabel();
        addRemoveLabel = new javax.swing.JLabel();
        whichLayerTextField = new javax.swing.JTextField();
        whichLayerLabel = new javax.swing.JLabel();
        addButton = new javax.swing.JButton();
        removeButton = new javax.swing.JButton();
        descLabel1 = new javax.swing.JLabel();
        descLabel2 = new javax.swing.JLabel();
        descLabel3 = new javax.swing.JLabel();
        addEditEdgeButton = new javax.swing.JButton();
        propagationComboBox = new javax.swing.JComboBox();
        propagationLabel = new javax.swing.JLabel();
        activationComboBox = new javax.swing.JComboBox();
        activationLabel = new javax.swing.JLabel();
        actParamTextField = new javax.swing.JTextField();
        actParamLabel = new javax.swing.JLabel();
        randomizeButton = new javax.swing.JButton();
        rightBottomPanel = new javax.swing.JPanel();
        viewLabel = new javax.swing.JLabel();
        zoomLabel = new javax.swing.JLabel();
        applyViewButton = new javax.swing.JButton();
        zoomComboBox = new javax.swing.JComboBox();
        hSpaceTextField = new javax.swing.JTextField();
        vSpaceTextField = new javax.swing.JTextField();
        hSpaceLabel = new javax.swing.JLabel();
        vSpaceLabel = new javax.swing.JLabel();
        rightBottomPanel2 = new javax.swing.JPanel();
        saveConfigButton = new javax.swing.JButton();
        loadConfigButton = new javax.swing.JButton();
        configLabel = new javax.swing.JLabel();

        jButton1.setText("jButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        leftPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        leftPanelTop.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        networkLabel.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        networkLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        networkLabel.setText("Network");

        layersTextField.setText("0");

        layersLabel.setText("layers");

        applyNetworkButton.setText("Apply");
        applyNetworkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                applyNetworkButtonActionPerformed(evt);
            }
        });

        calcResultButton.setText("Calculate result");
        calcResultButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calcResultButtonActionPerformed(evt);
            }
        });

        DescResult1Label.setText("Calculate output of the last");

        DescResult2Label.setText("added layer (the bottom one)");

        javax.swing.GroupLayout leftPanelTopLayout = new javax.swing.GroupLayout(leftPanelTop);
        leftPanelTop.setLayout(leftPanelTopLayout);
        leftPanelTopLayout.setHorizontalGroup(
            leftPanelTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(leftPanelTopLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(leftPanelTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(applyNetworkButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(calcResultButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(networkLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(leftPanelTopLayout.createSequentialGroup()
                        .addGroup(leftPanelTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(leftPanelTopLayout.createSequentialGroup()
                                .addComponent(layersTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(layersLabel))
                            .addComponent(DescResult1Label)
                            .addComponent(DescResult2Label))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        leftPanelTopLayout.setVerticalGroup(
            leftPanelTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(leftPanelTopLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(networkLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(leftPanelTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(layersTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(layersLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(applyNetworkButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(DescResult1Label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(DescResult2Label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(calcResultButton)
                .addContainerGap(22, Short.MAX_VALUE))
        );

        leftPanelBot.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        learningLabel.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        learningLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        learningLabel.setText("Learning");

        ruleComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        ruleLabel.setText("Select a rule:");

        trainingButton.setText("Select training file");
        trainingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trainingButtonActionPerformed(evt);
            }
        });

        ruleLabel1.setText("Path for training file:");

        paraLabel.setText("Parameters:");

        learnRateLabel.setText("learning rate");

        maxItLabel.setText("max iterations");

        applyEditButton.setText("Apply");
        applyEditButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                applyEditButtonActionPerformed(evt);
            }
        });

        stepButton.setText("Step");
        stepButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stepButtonActionPerformed(evt);
            }
        });

        runButton.setText("Run");
        runButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runButtonActionPerformed(evt);
            }
        });

        statisticsLabel1.setText("jLabel1");

        statisticsLabel2.setText("jLabel2");

        statisticsLabel3.setText("jLabel2");

        scenarioViewerPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        titleLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        titleLabel.setText("Scenario Viewer");

        nextButton.setText("Next");
        nextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextButtonActionPerformed(evt);
            }
        });

        previousButton.setText("Previous");
        previousButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previousButtonActionPerformed(evt);
            }
        });

        inputLabel.setText("Current Input:");

        outputLabel.setText("Target Output:");

        javax.swing.GroupLayout scenarioViewerPanelLayout = new javax.swing.GroupLayout(scenarioViewerPanel);
        scenarioViewerPanel.setLayout(scenarioViewerPanelLayout);
        scenarioViewerPanelLayout.setHorizontalGroup(
            scenarioViewerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(scenarioViewerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(scenarioViewerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(titleLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(scenarioViewerPanelLayout.createSequentialGroup()
                        .addGroup(scenarioViewerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(inputLabel)
                            .addComponent(outputLabel)
                            .addGroup(scenarioViewerPanelLayout.createSequentialGroup()
                                .addComponent(previousButton, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(nextButton, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        scenarioViewerPanelLayout.setVerticalGroup(
            scenarioViewerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(scenarioViewerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(titleLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(inputLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(outputLabel)
                .addGap(18, 18, 18)
                .addGroup(scenarioViewerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nextButton)
                    .addComponent(previousButton))
                .addContainerGap())
        );

        javax.swing.GroupLayout leftPanelBotLayout = new javax.swing.GroupLayout(leftPanelBot);
        leftPanelBot.setLayout(leftPanelBotLayout);
        leftPanelBotLayout.setHorizontalGroup(
            leftPanelBotLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(leftPanelBotLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(leftPanelBotLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(leftPanelBotLayout.createSequentialGroup()
                        .addComponent(scenarioViewerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(leftPanelBotLayout.createSequentialGroup()
                        .addComponent(applyEditButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(leftPanelBotLayout.createSequentialGroup()
                        .addComponent(paraLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(leftPanelBotLayout.createSequentialGroup()
                        .addGroup(leftPanelBotLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(learningLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(ruleLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(ruleLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())
                    .addGroup(leftPanelBotLayout.createSequentialGroup()
                        .addGroup(leftPanelBotLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(pathTextField, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ruleComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())
                    .addGroup(leftPanelBotLayout.createSequentialGroup()
                        .addComponent(trainingButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(leftPanelBotLayout.createSequentialGroup()
                        .addGroup(leftPanelBotLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(maxItTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 62, Short.MAX_VALUE)
                            .addComponent(learnRateTextField))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(leftPanelBotLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(learnRateLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(maxItLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 97, Short.MAX_VALUE))
                        .addGap(12, 12, 12))
                    .addGroup(leftPanelBotLayout.createSequentialGroup()
                        .addGroup(leftPanelBotLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(leftPanelBotLayout.createSequentialGroup()
                                .addComponent(stepButton, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(runButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(statisticsLabel2)
                            .addComponent(statisticsLabel3)
                            .addComponent(statisticsLabel1))
                        .addContainerGap())))
        );
        leftPanelBotLayout.setVerticalGroup(
            leftPanelBotLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(leftPanelBotLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(learningLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ruleLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ruleComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(ruleLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pathTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addComponent(trainingButton)
                .addGap(18, 18, 18)
                .addComponent(paraLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(leftPanelBotLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(learnRateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(learnRateLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(leftPanelBotLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(maxItTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(maxItLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(applyEditButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(leftPanelBotLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(stepButton)
                    .addComponent(runButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(statisticsLabel1)
                .addGap(6, 6, 6)
                .addComponent(statisticsLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(statisticsLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scenarioViewerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout leftPanelLayout = new javax.swing.GroupLayout(leftPanel);
        leftPanel.setLayout(leftPanelLayout);
        leftPanelLayout.setHorizontalGroup(
            leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(leftPanelTop, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(leftPanelBot, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        leftPanelLayout.setVerticalGroup(
            leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(leftPanelLayout.createSequentialGroup()
                .addComponent(leftPanelTop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(leftPanelBot, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        treeScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        treeScrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        rightPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        rightPanelTop.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        neuronsLabel.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        neuronsLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        neuronsLabel.setText("Neurons");

        addRemoveLabel.setText("Add/Remove Neurons:");

        whichLayerLabel.setText("layer");

        addButton.setText("Add");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        removeButton.setText("Remove");
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });

        descLabel1.setText("To add/edit an edge,");

        descLabel2.setText("press the button and");

        descLabel3.setText("click on the two Neurons.");

        addEditEdgeButton.setText("Add/Edit edge");
        addEditEdgeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addEditEdgeButtonActionPerformed(evt);
            }
        });

        propagationComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        propagationLabel.setText("propagation");

        activationComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        activationComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                activationComboBoxActionPerformed(evt);
            }
        });

        activationLabel.setText("activation");

        actParamTextField.setText("1");

        actParamLabel.setText("act. parameter");

        randomizeButton.setText("Randomize");
        randomizeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                randomizeButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout rightPanelTopLayout = new javax.swing.GroupLayout(rightPanelTop);
        rightPanelTop.setLayout(rightPanelTopLayout);
        rightPanelTopLayout.setHorizontalGroup(
            rightPanelTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rightPanelTopLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(rightPanelTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(neuronsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(descLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(addEditEdgeButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(randomizeButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(rightPanelTopLayout.createSequentialGroup()
                        .addComponent(addButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(removeButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(rightPanelTopLayout.createSequentialGroup()
                        .addGroup(rightPanelTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(addRemoveLabel)
                            .addGroup(rightPanelTopLayout.createSequentialGroup()
                                .addComponent(whichLayerTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(whichLayerLabel))
                            .addGroup(rightPanelTopLayout.createSequentialGroup()
                                .addGroup(rightPanelTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(actParamTextField)
                                    .addComponent(activationComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(propagationComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(rightPanelTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(activationLabel)
                                    .addComponent(propagationLabel)
                                    .addComponent(actParamLabel)))
                            .addComponent(descLabel1)
                            .addComponent(descLabel2))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        rightPanelTopLayout.setVerticalGroup(
            rightPanelTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rightPanelTopLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(neuronsLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addRemoveLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(rightPanelTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(whichLayerTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(whichLayerLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(rightPanelTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(propagationComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(propagationLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(rightPanelTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(activationComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(activationLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(rightPanelTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(actParamTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(actParamLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(rightPanelTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addButton)
                    .addComponent(removeButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 44, Short.MAX_VALUE)
                .addComponent(descLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(descLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(descLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addEditEdgeButton)
                .addGap(4, 4, 4)
                .addComponent(randomizeButton)
                .addContainerGap())
        );

        rightBottomPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        viewLabel.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        viewLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        viewLabel.setText("View");

        zoomLabel.setText("zoomoption");

        applyViewButton.setText("Apply");
        applyViewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                applyViewButtonActionPerformed(evt);
            }
        });

        zoomComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        hSpaceTextField.setText("20");

        vSpaceTextField.setText("100");

        hSpaceLabel.setText("hspace");

        vSpaceLabel.setText("vspace");

        javax.swing.GroupLayout rightBottomPanelLayout = new javax.swing.GroupLayout(rightBottomPanel);
        rightBottomPanel.setLayout(rightBottomPanelLayout);
        rightBottomPanelLayout.setHorizontalGroup(
            rightBottomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rightBottomPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(rightBottomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(applyViewButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(viewLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(rightBottomPanelLayout.createSequentialGroup()
                        .addComponent(zoomComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(zoomLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(rightBottomPanelLayout.createSequentialGroup()
                        .addGroup(rightBottomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(vSpaceTextField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 69, Short.MAX_VALUE)
                            .addComponent(hSpaceTextField, javax.swing.GroupLayout.Alignment.LEADING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(rightBottomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(hSpaceLabel)
                            .addComponent(vSpaceLabel))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        rightBottomPanelLayout.setVerticalGroup(
            rightBottomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rightBottomPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(viewLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(rightBottomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(zoomLabel)
                    .addComponent(zoomComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(rightBottomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hSpaceTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(hSpaceLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(rightBottomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(vSpaceTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(vSpaceLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(applyViewButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        rightBottomPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        saveConfigButton.setText("save");
        saveConfigButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveConfigButtonActionPerformed(evt);
            }
        });

        loadConfigButton.setText("load");
        loadConfigButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadConfigButtonActionPerformed(evt);
            }
        });

        configLabel.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        configLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        configLabel.setText("Configurations");

        javax.swing.GroupLayout rightBottomPanel2Layout = new javax.swing.GroupLayout(rightBottomPanel2);
        rightBottomPanel2.setLayout(rightBottomPanel2Layout);
        rightBottomPanel2Layout.setHorizontalGroup(
            rightBottomPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rightBottomPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(rightBottomPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(configLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(rightBottomPanel2Layout.createSequentialGroup()
                        .addComponent(saveConfigButton, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(loadConfigButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        rightBottomPanel2Layout.setVerticalGroup(
            rightBottomPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rightBottomPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(configLabel)
                .addGap(5, 5, 5)
                .addGroup(rightBottomPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveConfigButton)
                    .addComponent(loadConfigButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout rightPanelLayout = new javax.swing.GroupLayout(rightPanel);
        rightPanel.setLayout(rightPanelLayout);
        rightPanelLayout.setHorizontalGroup(
            rightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(rightPanelTop, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(rightBottomPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(rightBottomPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        rightPanelLayout.setVerticalGroup(
            rightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rightPanelLayout.createSequentialGroup()
                .addComponent(rightPanelTop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rightBottomPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rightBottomPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(leftPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(treeScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 633, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(rightPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(rightPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(treeScrollPane)
                    .addComponent(leftPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>                        

    //++++++++++++++++++++++++++++++++++++++++++Methods+++++++++++++++++++++++++++++++++++++   
    public void updateButtonTexts(){
    	NeuronButton bComponent;
    	DecimalFormat df = new DecimalFormat("0.00");
    	for (Component component:gridPanel.getComponents()){
    		if(component.getClass() == NeuronButton.class){
    			bComponent = (NeuronButton) component;
    			bComponent.setText("" + df.format(myNetwork.getNeuron(bComponent.layer, bComponent.position).getLastOutput()));
    		}
    	}
    }
    
    //+++++++++++++++++++++++++++++++++++++++++++BUTTONS++++++++++++++++++++++++++++++++++
    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
    	int targetLayer;
    	String propFunc;
    	String actFunc;
    	double[] actParam = new double[5];
    	try{
        	//throws NumberFormatException if not a Number.
    		targetLayer = Integer.parseInt(whichLayerTextField.getText())-1;
    		//throws NullPointerException if Network has not been initialized.
    		if (targetLayer < myNetwork.getLayerCount() && targetLayer >= 0){
    			
    			//adding a new Neuron might change the maxLayerSize to maxLayerSize + 1
    			propFunc = possiblePropFunc[propagationComboBox.getSelectedIndex()];
    			actFunc = possibleActFunc[activationComboBox.getSelectedIndex()];
    			//TODO add check for numberformat
    			actParam[0] = Double.parseDouble(actParamTextField.getText());
                myNetwork.addNeuron(targetLayer, new Neuron(propFunc,actFunc,actParam));
                
                //Check if the maxLayerSize has changed and if so add a column to the gridlayout.
                int whereTo;
                if (myNetwork.maxLayerSize()> gridPanelLayout.getColumns()){
                	int newColumns = gridPanelLayout.getColumns()+1;
                	gridPanelLayout.setColumns(newColumns);            
                	//fill up the gridLayout with the new Neuron and empty labels where there are no new Neurons to be added.
                	for (int row = 0; row < myNetwork.getLayerCount();row++){
                		if (row == targetLayer){
                			//we want to put the Neuron behind the last existing one in a row.
                			whereTo = newColumns*row-1 + myNetwork.howManyInLayer(row);
                			gridPanel.add(new NeuronButton("" + 0,targetLayer,myNetwork.howManyInLayer(targetLayer)-1,this),whereTo);
                		} else {
                			// we need to add a label to the end of each row. if we have a gridlayout with 3 rows and 5 columns
                			// this means: add a label to index 4,9 and 14. this can be calculated by rowNumber*Columns-1 i.e for column 2: 3*2-1 = 9.
                			whereTo = newColumns*row-1 + newColumns;
                			gridPanel.add(new JLabel(""),whereTo);
                		}                		
                	}
                //If the maxLayerSize has not been changed, a Label has to be replaced by the added Neuron.
                } else {
                	whereTo = gridPanelLayout.getColumns()*targetLayer-1 + myNetwork.howManyInLayer(targetLayer);
                	gridPanel.remove(whereTo);
                	gridPanel.add(new NeuronButton("" + 0,targetLayer,myNetwork.howManyInLayer(targetLayer)-1,this),whereTo);
                }
                
              //Calculate new Height and Width of gridPanel
                int width = (neuronWidth[currentZoom]+gridHspace)*gridPanelLayout.getColumns()-gridHspace;
                int height = (neuronHeight[currentZoom]+gridVspace)*gridPanelLayout.getRows()-gridVspace;
                gridPanel.setPreferredSize(new Dimension(width,height));
                drawPanel.setPreferredSize(new Dimension(width,height));
                gridPanel.setVisible(false);
                gridPanel.setVisible(true);
    		} else {
    			JOptionPane.showMessageDialog(this, "The layer can only be between 1 and " + (myNetwork.getLayerCount()));
    		}   
        }  catch (NumberFormatException e){
        	JOptionPane.showMessageDialog(this, whichLayerTextField.getText() + " is not a valid layer");
        }  catch(NullPointerException e){
        	JOptionPane.showMessageDialog(this, "Please setup a Network first.");
        }
    }//GEN-LAST:event_addButtonActionPerformed

    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
    	int targetLayer;
    	try{
        	//throws NumberFormatException if not a Number.
    		targetLayer = Integer.parseInt(whichLayerTextField.getText())-1;
    		//throws NullPointerException if Network has not been initialized.
    		if (targetLayer < myNetwork.getLayerCount() && targetLayer >= 0 && myNetwork.howManyInLayer(targetLayer)>0){
    			int whereTo;
                //We never shrink the column size so we can just remove the NeuronButton and add a label to the end of the row
                whereTo = gridPanelLayout.getColumns()*targetLayer-1 + myNetwork.howManyInLayer(targetLayer);
        		gridPanel.remove(whereTo);
        		whereTo = gridPanelLayout.getColumns()*targetLayer-1 + gridPanelLayout.getColumns();
    			gridPanel.add(new JLabel(""),whereTo);
                gridPanel.setVisible(false);
                gridPanel.setVisible(true);
                myNetwork.removeNeuron(targetLayer);
    		} else {
    			if(myNetwork.howManyInLayer(targetLayer)==0){
    				JOptionPane.showMessageDialog(this, "There are no Neurons to remove!");	
    			} else{
    			JOptionPane.showMessageDialog(this, "The layer can only be between 1 and " + (myNetwork.getLayerCount()));
    			}    			
    		}
            //NeuronButton geladen = (NeuronButton) gridPanel.getComponent(4);
            //geladen.setEnabled(false);
    		
        }  catch (NumberFormatException e){
        	JOptionPane.showMessageDialog(this, whichLayerTextField.getText() + " is not a valid layer");
        }  catch(NullPointerException e){
        	JOptionPane.showMessageDialog(this, "Please setup a Network first.");
        }    	
    }//GEN-LAST:event_removeButtonActionPerformed

    private void addEditEdgeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addEditEdgeButtonActionPerformed
        
    	if (myNetwork.getAddedNeurons()>1){
    		//disable add/edit button
        	addEditEdgeButton.setEnabled(false);
        	removeButton.setEnabled(false);
        	//tell the buttons that editMode is on and the first Button will be selected
        	editMode = true;
        	selectOrigin = true;   	
    	} else {
    		JOptionPane.showMessageDialog(this,"Not enough Neurons available. Needs at least 2.");
    	}
    	
    }//GEN-LAST:event_addEditEdgeButtonActionPerformed

    private void applyNetworkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_applyNetworkButtonActionPerformed
        try{
        	myNetwork = new Network(Integer.parseInt(layersTextField.getText()));
        	//enable Buttons unavailable before Network is created
            this.addEditEdgeButton.setEnabled(true);
            this.addButton.setEnabled(true);
            this.removeButton.setEnabled(true);
            
        	gridPanel.removeAll();
        	gridPanelLayout.setColumns(0);
        	//needs check for range! (negative and 0 are not allowed)
        	gridPanelLayout.setRows(myNetwork.getLayerCount());
            gridPanel.setVisible(false);
            gridPanel.setVisible(true);
            networkInitiated = true;
            randomizeButton.setEnabled(true);
        } catch (NumberFormatException e){
        	JOptionPane.showMessageDialog(this, layersTextField.getText() + " is not a valid layer count.");
        }
   
    }//GEN-LAST:event_applyNetworkButtonActionPerformed

    private void applyViewButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_applyViewButtonActionPerformed
    	currentZoom = Integer.parseInt(zoomOptions[zoomComboBox.getSelectedIndex()]);
    	//TODO check for correct Input!
        this.gridHspace = Integer.parseInt(hSpaceTextField.getText());
        this.gridVspace = Integer.parseInt(vSpaceTextField.getText());        
        
        int width = (neuronWidth[currentZoom]+gridHspace)*gridPanelLayout.getColumns()-gridHspace;
        int height = (neuronHeight[currentZoom]+gridVspace)*gridPanelLayout.getRows()-gridVspace;
        gridPanel.setPreferredSize(new Dimension(width,height));
        drawPanel.setPreferredSize(new Dimension(width,height));
        
        path = "Images/Neuron" + this.currentZoom +".png";
        imgURL = getClass().getResource(path);
        Component[] gridComponents = gridPanel.getComponents();
        Font font = new Font("Sans-Serif", Font.PLAIN, fontSizes[currentZoom]);
        
        NeuronButton button;
        for (int i = 0; i < gridComponents.length; i++){
        	if(gridComponents[i].getClass() == new NeuronButton("",1,1,this).getClass()){
        		button = (NeuronButton) gridComponents[i];
        		button.setIcon(new ImageIcon(imgURL, ""));
        		button.setFont(font);
        	}
        }
        
        gridPanel.setVisible(false);
        gridPanel.setVisible(true);
    }//GEN-LAST:event_applyViewButtonActionPerformed

    private void trainingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trainingButtonActionPerformed
    	//Create a file chooser
    	final JFileChooser fc = new JFileChooser();
    	setFileFilter(fc, "csv", "Comma-separated values", false);
    	//In response to a button click:
    	int returnVal = fc.showOpenDialog(this);
    	if (returnVal == JFileChooser.APPROVE_OPTION) {
            String path = fc.getSelectedFile().getPath();
            pathTextField.setText(path);
        }
    }//GEN-LAST:event_trainingButtonActionPerformed

    private void stepButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stepButtonActionPerformed
        	learning.nextIteration();
         	String[] info;
         	info = learning.getInfo();
         	statisticsLabel3.setText(info[0]);
         	statisticsLabel1.setText(info[2]);
         	statisticsLabel2.setText(info[1]);
         	statisticsLabel3.setVisible(true);
         	statisticsLabel1.setVisible(true);
         	statisticsLabel2.setVisible(true);
         	scenarioViewerPanel.setVisible(true);
    }//GEN-LAST:event_stepButtonActionPerformed

    private void runButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runButtonActionPerformed
	    	try{
	    		double threshold=0.05;
	        	String result = (String)JOptionPane.showInputDialog(
	                    this,
	                    "Please enter error threshold:",
	                    "Error threshold",
	                    JOptionPane.PLAIN_MESSAGE,
	                    null,
	                    null,
	                    null);
	        	if(result != null){
	        		//throws NumberFormatException
	        		threshold = Double.parseDouble(result);
	        		learning.run(Integer.parseInt(maxItTextField.getText()), threshold);
		    		this.calcResultButtonActionPerformed(evt);
		         	String[] info;
		         	info = learning.getInfo();
		         	statisticsLabel3.setVisible(true);
		         	statisticsLabel1.setVisible(true);
		         	statisticsLabel2.setVisible(true);
		         	statisticsLabel2.setText(info[1]);
		         	statisticsLabel3.setText(info[0]);
		         	statisticsLabel1.setText(info[2]);
		         	scenarioViewerPanel.setVisible(true);
	        	}
	    	}
	    	catch(NumberFormatException ex)
	    	{
	        	JOptionPane.showMessageDialog(this, "No valid double value.");
	        }
    }//GEN-LAST:event_runButtonActionPerformed

    private void calcResultButtonActionPerformed(java.awt.event.ActionEvent evt) {
    	myNetwork.calcResultVector();
    	this.updateButtonTexts();
    }  
    
    private void activationComboBoxActionPerformed(java.awt.event.ActionEvent evt) {  
        if(possibleActFunc[activationComboBox.getSelectedIndex()].equals("sig")){
        	actParamTextField.setVisible(true);
        	 actParamLabel.setVisible(true);
        } else {
        	actParamTextField.setVisible(false);
        	 actParamLabel.setVisible(false);
        }
    } 
    
    private void applyEditButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                
        if(applyEditButton.getText().equals("Apply")){
        	//TODO add checking
        	//i.e. Check if there are Neurons in input and output layer.
        	this.learning = new Learning(pathTextField.getText(),myNetwork,possibleLearnMethods[ruleComboBox.getSelectedIndex()]);
        	learning.setLearningRate(Double.parseDouble(learnRateTextField.getText()));
        	learning.setMaxIterations(Integer.parseInt(maxItTextField.getText()));
        	applyEditButton.setText("Edit");
        	pathTextField.setEnabled(false);
        	learnRateTextField.setEnabled(false);
        	maxItTextField.setEnabled(false);
        	stepButton.setEnabled(true);
        	runButton.setEnabled(true);
        	ruleComboBox.setEnabled(false);
        	trainingButton.setEnabled(false);
        }else{ 	
        	applyEditButton.setText("Apply");
        	pathTextField.setEnabled(true);
        	learnRateTextField.setEnabled(true);
        	maxItTextField.setEnabled(true);
        	stepButton.setEnabled(false);
        	runButton.setEnabled(false);
        	ruleComboBox.setEnabled(true);
        	trainingButton.setEnabled(true);
        	statisticsLabel3.setVisible(false);
        	statisticsLabel2.setVisible(false);
         	statisticsLabel1.setVisible(false);
         	scenarioViewerPanel.setVisible(false);
        }
    }                                               

    private void randomizeButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                
    	for(int i = 0;i<myNetwork.getAddedNeurons(); i++){
			for(int j = i+1;j<myNetwork.getAddedNeurons();j++){
				//only generate edges from one layer to the following
				if (myNetwork.calcRelativePosition(i)[0]+1 == myNetwork.calcRelativePosition(j)[0]){
					myNetwork.updateWeight(i, j, Math.round((Math.random()+0.1)*5) );
				}
			}
			}
    }
    
    private int currentScenario = 0;
    private void previousButtonActionPerformed(java.awt.event.ActionEvent evt) {
    	double[][] inputValues = this.learning.getInputValues();
    	double[][] outputValues =this.learning.getOutputValues();
    	currentScenario--;
    	if (currentScenario<0){
    		currentScenario = inputValues.length-1;
    	}
    	//update labels
    	inputLabel.setText("Current Input: ");
    	outputLabel.setText("Target Output: ");
    	//update labels and set input
    	for (int i = 0; i<inputValues[currentScenario].length;i++){
    		inputLabel.setText(inputLabel.getText()+"  "+inputValues[currentScenario][i]);
    		myNetwork.setInput(0, i, inputValues[currentScenario][i]);
    	}
    	for (int i = 0; i<outputValues[currentScenario].length;i++){
    		outputLabel.setText(outputLabel.getText()+"  "+outputValues[currentScenario][i]);
    	}
    	//display result
    	this.calcResultButtonActionPerformed(evt);
    }                                              

    private void nextButtonActionPerformed(java.awt.event.ActionEvent evt) {                                           
    	double[][] inputValues = this.learning.getInputValues();
    	double[][] outputValues =this.learning.getOutputValues();
    	currentScenario++;
    	if (currentScenario==inputValues.length){
    		currentScenario = 0;
    	}
    	//update labels
    	inputLabel.setText("Current Input: ");
    	outputLabel.setText("Target Output: ");
    	//update labels and set input
    	for (int i = 0; i<inputValues[currentScenario].length;i++){
    		inputLabel.setText(inputLabel.getText()+"  "+inputValues[currentScenario][i]);
    		myNetwork.setInput(0, i, inputValues[currentScenario][i]);
    	}
    	for (int i = 0; i<outputValues[currentScenario].length;i++){
    		outputLabel.setText(outputLabel.getText()+"  "+outputValues[currentScenario][i]);
    	}
    	//display result
    	this.calcResultButtonActionPerformed(evt);
    }    
    
	private void setFileFilter(JFileChooser fc, final String fileExtension, final String description, final boolean acceptAllFileFilter)
	{
		fc.setFileFilter(new FileFilter()
		{
			public boolean accept(File f)
			{
				return f.isDirectory() || f.getName().toLowerCase().endsWith("." + fileExtension);
			}

			public String getDescription()
			{
				return description + " (*." + fileExtension + ")";
			}
		});

		fc.setAcceptAllFileFilterUsed(acceptAllFileFilter);
	}

	private void loadConfigButtonActionPerformed(java.awt.event.ActionEvent evt)
	{
		JFileChooser fc = new JFileChooser();
		setFileFilter(fc, "nn", "Neuronales Netz", false);

		if (fc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION)
		{
			String path = fc.getSelectedFile().getPath();

			Serializable.deserialize(path);
			myNetwork = Serializable.getNetwork();
			networkInitiated = true;
			// enable Buttons unavailable before Network is created
			this.addEditEdgeButton.setEnabled(true);
			this.addButton.setEnabled(true);
			this.removeButton.setEnabled(true);

			// Set gridPanelLayout size and add NeuronButtons...
			gridPanel.removeAll();
			gridPanelLayout.setColumns(myNetwork.maxLayerSize());
			gridPanelLayout.setRows(myNetwork.getLayerCount());

			// add empty label at all fields in the gridPanel
			for (int index = 0; index < (myNetwork.maxLayerSize() * myNetwork.getLayerCount()); index++)
			{
				gridPanel.add(new JLabel(""), index);
			}

			// add NeuronButtons at the relevant fields
			LinkedList<Neuron>[] neuronList = myNetwork.getNeuronLayer();
			for (int layer = 0; layer < neuronList.length; layer++)
			{
				for (int column = 0; column < neuronList[layer].size(); column++)
				{
					int index = (myNetwork.maxLayerSize() * layer) + column;
					gridPanel.remove(index);
					gridPanel.add(new NeuronButton("" + 0, layer, column, this), index);
				}
			}
			gridPanel.setVisible(false);
			gridPanel.setVisible(true);

			randomizeButton.setEnabled(true);
			
			this.updateButtonTexts();

			// set zoom and learning options
			neuronalNetworkSerializable.NeuronalNetworkGUIProperties nnGUIProp = new NeuronalNetworkGUIProperties();
			nnGUIProp = Serializable.getNeuornalNetworkGUIProperties();
			zoomComboBox.setSelectedIndex(nnGUIProp.getZoomOptionIndex());
			hSpaceTextField.setText(String.valueOf(nnGUIProp.gethSpace()));
			vSpaceTextField.setText(String.valueOf(nnGUIProp.getvSpace()));
			applyViewButton.doClick();

			if (nnGUIProp.learnOptionsIsSet())
			{
				learnRateTextField.setText(String.valueOf(nnGUIProp.getLearningRate()));
				ruleComboBox.setSelectedItem(nnGUIProp.getLearningRule());
				maxItTextField.setText(String.valueOf(nnGUIProp.getMaxIterations()));
				pathTextField.setText(nnGUIProp.getTrainingFilePath());
				applyEditButton.doClick();
			}
			nnGUIProp = null;
			
			this.setTitle(String.format("%s - %s", title, path));
		}
	}

	private void saveConfigButtonActionPerformed(java.awt.event.ActionEvent evt)
	{
		JFileChooser fc = new JFileChooser();
		String fileExtension = "nn";
		setFileFilter(fc, fileExtension, "Neuronales Netz", false);

		if (fc.showSaveDialog(this) == JFileChooser.APPROVE_OPTION)
		{
			String path = fc.getSelectedFile().getPath();
			if (!path.endsWith("." + fileExtension))
			{
				path = path + "." + fileExtension;
			}
			neuronalNetworkSerializable.NeuronalNetworkGUIProperties nnGUIProp = new NeuronalNetworkGUIProperties();
			nnGUIProp.setZoomOptionIndex(currentZoom);
			nnGUIProp.sethSpace(gridHspace);
			nnGUIProp.setvSpace(gridVspace);
			if (learning != null)
			{
				nnGUIProp.setLearnOptions();
				nnGUIProp.setLearningRate(learning.getLearningRate());
				nnGUIProp.setLearningRule(learning.getLearnMethod());
				nnGUIProp.setMaxIterations(learning.getMaxIterations());
				nnGUIProp.setTrainingFilePath(learning.getTrainingFilePath());
			}
			Serializable.serialize(path, myNetwork, nnGUIProp);
			nnGUIProp = null;
			
			this.setTitle(String.format("%s - %s", title, path));
		}
	}

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NeuronalNetworkGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NeuronalNetworkGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NeuronalNetworkGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NeuronalNetworkGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NeuronalNetworkGUI().setVisible(true);
            }
        });      
    }
    
    public Network getNetwork(){
    	return myNetwork;
    }
    
    public JButton getAddEditEdgeButton(){
    	return addEditEdgeButton;
    }
    
    public JButton getRemoveButton(){
    	return removeButton;
    }
    
    public JPanel getGridPanel(){
    	return this.gridPanel;
    }
    
    
    
 // Variables declaration - do not modify                     
    private javax.swing.JLabel DescResult1Label;
    private javax.swing.JLabel DescResult2Label;
    private javax.swing.JLabel actParamLabel;
    private javax.swing.JTextField actParamTextField;
    private javax.swing.JComboBox activationComboBox;
    private javax.swing.JLabel activationLabel;
    private javax.swing.JButton addButton;
    private javax.swing.JButton addEditEdgeButton;
    private javax.swing.JLabel addRemoveLabel;
    private javax.swing.JButton applyEditButton;
    private javax.swing.JButton applyNetworkButton;
    private javax.swing.JButton applyViewButton;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JButton calcResultButton;
    private javax.swing.JLabel configLabel;
    private javax.swing.JLabel descLabel1;
    private javax.swing.JLabel descLabel2;
    private javax.swing.JLabel descLabel3;
    private javax.swing.JLabel hSpaceLabel;
    private javax.swing.JTextField hSpaceTextField;
    private javax.swing.JLabel inputLabel;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel layersLabel;
    private javax.swing.JTextField layersTextField;
    private javax.swing.JLabel learnRateLabel;
    private javax.swing.JTextField learnRateTextField;
    private javax.swing.JLabel learningLabel;
    private javax.swing.JPanel leftPanel;
    private javax.swing.JPanel leftPanelBot;
    private javax.swing.JPanel leftPanelTop;
    private javax.swing.JButton loadConfigButton;
    private javax.swing.JLabel maxItLabel;
    private javax.swing.JTextField maxItTextField;
    private javax.swing.JLabel networkLabel;
    private javax.swing.JLabel neuronsLabel;
    private javax.swing.JButton nextButton;
    private javax.swing.JLabel outputLabel;
    private javax.swing.JLabel paraLabel;
    private javax.swing.JTextField pathTextField;
    private javax.swing.JButton previousButton;
    private javax.swing.JComboBox propagationComboBox;
    private javax.swing.JLabel propagationLabel;
    private javax.swing.JButton randomizeButton;
    private javax.swing.JButton removeButton;
    private javax.swing.JPanel rightBottomPanel;
    private javax.swing.JPanel rightBottomPanel2;
    private javax.swing.JPanel rightPanel;
    private javax.swing.JPanel rightPanelTop;
    private javax.swing.JComboBox ruleComboBox;
    private javax.swing.JLabel ruleLabel;
    private javax.swing.JLabel ruleLabel1;
    private javax.swing.JButton runButton;
    private javax.swing.JButton saveConfigButton;
    private javax.swing.JPanel scenarioViewerPanel;
    private javax.swing.JLabel statisticsLabel1;
    private javax.swing.JLabel statisticsLabel2;
    private javax.swing.JLabel statisticsLabel3;
    private javax.swing.JButton stepButton;
    private javax.swing.JLabel titleLabel;
    private javax.swing.JButton trainingButton;
    private javax.swing.JScrollPane treeScrollPane;
    private javax.swing.JLabel vSpaceLabel;
    private javax.swing.JTextField vSpaceTextField;
    private javax.swing.JLabel viewLabel;
    private javax.swing.JLabel whichLayerLabel;
    private javax.swing.JTextField whichLayerTextField;
    private javax.swing.JComboBox zoomComboBox;
    private javax.swing.JLabel zoomLabel;
    // End of variables declaration       
}
